#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;                               # rpm: perl-Getopt-Long
use File::Path          qw /make_path/;         # rpm: perl-File-Path
use File::Basename;                             # rpm: perl
use IO::Interactive     qw /is_interactive/;    # rpm: perl-IO-Interactive

use constant SSH_CONFIG      => "$ENV{'HOME'}/.ssh/config";
use constant ALL_TARGETS     => '__ALL__';
use constant GENERIC_HOST    => '__GENERIC__';
use constant GENERIC_BASEDIR => 'autosshfs';
use constant TCP_TIMEOUT     => 5;

sub usage {
    my $self = basename($0);
    my $message = shift;

    $message and print "$message\n\n";
    print <<"END_MESSAGE";
Usage: $self [--file <file>] [--connect [<target>[,<target2>,...]]] [--disconnect [<target>[,<target2>,...]]] [--list] [--mounts] [--verbose] [--help]

    -h          : Display this help message and exit
    -f <file>   : Use the specified file instead of @{[ SSH_CONFIG ]}
    -l          : List targets and exit
    -m          : List mount status and exit
    -c          : Connect all targets
    -c <target> : Connect a specific target or a comma-separated list of targets
    -d          : Disconnect all targets
    -d <target> : Disconnect a specific target or a comma-separated list of targets
    -r          : Reconnect all targets
    -r <target> : Reconnect a specific target or a comma-separated list of targets
    -v          : Verbose; also implies '-m' after connect/disconnect/reconnect
END_MESSAGE

    exit 1;
}

sub read_config {
    my ($options, $config) = @_;
    my $marker = qr /^\s*#!!!#/;
    my ($handle, $host);

    open($handle, "<", $options->{'file'}) or
        die "Cannot open '$options->{'file'}' for reading";

    while (<$handle>) {
        chomp;
        # skip empty lines and comments not matching autosshfs directives
        m/^\s*$/ and next;
        m/^\s*#/ and not m/$marker/ and next;

        m/^\s*Host\s+([^\s]+)\s*$/ and do {
            $host = $1;
            $host eq '*' and $host = &GENERIC_HOST;
            $config->{$host}->{'Host'} = $host;
            next;
        };

        m/$marker\s+([^\s]+)\s+(.*)\s*$/ and defined $host and do {
            $options->{'verbose'} and
                print STDERR "Host '$host': found autosshfs option line: $_\n";
            # hash key ($variable) 'Capitalized'
            my $variable = ucfirst(lc($1));
            my $value = $2;

            # replace env variables in paths (or standalone) by their values
            $value =~ m/\$/ and do {
                my @elements = split("/", $value);
                foreach (@elements) {
                    /\$/ or next;
                    s/\$//;
                    exists $ENV{$_} and $_ = $ENV{$_};
                }
                $value = join("/", @elements);
            };

            $config->{$host}->{'autosshfs'}->{$variable} = $value;
            next;
        };

        m/^\s*([^\s]+)\s+(.*)\s*$/ and defined $host and do {
            # hash key ($variable) 'Capitalized'
            my $variable = ucfirst(lc($1));
            my $value = $2;
            $config->{$host}->{$variable} = $value;
            next;
        };
    }
    close($handle);

    defined $config->{&GENERIC_HOST}->{'autosshfs'}->{'Basedir'} or do {
        $config->{&GENERIC_HOST}->{'autosshfs'}->{'Basedir'} =
            $ENV{'HOME'} . '/' . &GENERIC_BASEDIR;
        $config->{'verbose'} and print STDERR "autosshfs variable 'BaseDir' not"
            . " defined; setting to '"
            . $config->{&GENERIC_HOST}->{'autosshfs'}->{'Basedir'} . "'\n";
    };

    defined $config->{&GENERIC_HOST}->{'Permitlocalcommand'} and
        lc($config->{&GENERIC_HOST}->{'Permitlocalcommand'}) eq 'yes' or do {
        $config->{'verbose'} and
            print STDERR "ssh variable 'PermitLocalCommand' not set in 'Host *'"
            . "; you will not be able to connect autosshfs mounts automatically"
            . " after a successfull ssh connection via 'LocalCommand'. See 'man"
            . " ssh_config'.\n";
    };
}

sub list_targets {
    my $config = shift;
    my $p;

    foreach my $target (sort keys %$config) {
        my $name = $target;
        $target eq &GENERIC_HOST and $name = '*';
        print "Host '${name}'\n\tSSH options:\r\t\t\t\t";

        $p = 0;
        foreach my $variable (sort keys %{ $config->{$target} }) {
            $variable eq 'autosshfs' and next;
            $p and print "; ";
            print "$variable $config->{$target}->{$variable}";
            $p = 1;
        }
        print "\n\tautosshfs options:\r\t\t\t\t";

        $p = 0;
        foreach my $variable (sort keys %{ $config->{$target}->{'autosshfs'} }) {
            $p and print "; ";
            print "$variable $config->{$target}->{'autosshfs'}->{$variable}";
            $p = 1;
        }
        print "\n";
    }
}

sub list_mounts {
    my $config = shift;
    my @mounts;
    my $mounted = 0;
    my $handle;

    open $handle, "<", '/proc/mounts' or die "Cannot access /proc/mounts";
    while (<$handle>) {
        chomp;
        push @mounts, $_;
    }
    close $handle;

    foreach my $target (sort keys %$config) {
        $target eq &GENERIC_HOST and next;
        my @mounted = grep(/\@${target}:/, @mounts);
        scalar @mounted and print join("\n", @mounted) . "\n";
    }
}

sub update_conn_settings {
    my ($config, $conn_settings, $target) = @_;
    # SSH options NOT to be added to sshfs command line
    my @do_not_add = qw / autosshfs Host HostName LocalCommand
                          LocalForward RemoteForward DynamicForward /;
    my @def_settings  = qw / -o compression=yes
                             -o follow_symlinks
                             -o transform_symlinks
                             -o reconnect /;

    @$conn_settings = @def_settings;

    defined $config->{'target'} or return;

    # add SSH options
    foreach my $option (keys %{ $config->{'target'} }) {
        grep(/\b$option\b/i, @do_not_add) and next;
        push @$conn_settings,
            ('-o', $option . '=' . $config->{'target'}->{$option});
    }
}

sub mounted {
    my $target = shift;
    my $mounted = 0;
    my $handle;

    open $handle, "<", '/proc/mounts' or die "Cannot access /proc/mounts";
    while (<$handle>) {
        if ( m/\@${target}:/ ) {
            $mounted = 1; last;
        }
    }
    close $handle;

    return $mounted;
}

sub get_local {
    my ($config, $target) = @_;
    my $local;

    $local = $config->{&GENERIC_HOST}->{'autosshfs'}->{'Basedir'} . '/';
    $local .= (defined $config->{$target}->{'autosshfs'}->{'Localdir'}) ?
        $config->{$target}->{'autosshfs'}->{'Localdir'} : $target;

    return $local;
}

sub get_remote {
    my ($config, $target) = @_;
    my $remote;

    $remote = $target . ':';
    defined $config->{$target}->{'User'} and
        $remote = $config->{$target}->{'User'} . '@' . $remote;
    $remote .= (defined $config->{$target}->{'autosshfs'}->{'Remotedir'}) ?
        $config->{$target}->{'autosshfs'}->{'Remotedir'} : '.';

    return $remote;
}

sub same_arrays {
    my ($a, $b) = @_;
    my $equals = 1;

    (@$a != @$b) and return 0;

    foreach (my $i = 0; $i < @$a; $i++) {
        if (not defined @{$a}[$i] or
            not defined @{$b}[$i] or
            "@{$a}[$i]" ne "@{$b}[$i]") {

            $equals = 0;
            last;
        }
    }

	return $equals;
}

sub yesno {
    my $question = shift;

    print "$question [y/N]: ";
    system "stty", "-icanon", "eol", "\001";
    my $answer = getc(STDIN);
    system "stty", "icanon", "eol", "^@";
    print "\n";

    return (lc($answer) eq 'y');
}

sub check_prompt_all {
    my ($config, $action) = @_;

    if ($config->{&GENERIC_HOST}->{'autosshfs'}->{'Promptforall'} and
        lc($config->{&GENERIC_HOST}->{'autosshfs'}->{'Promptforall'}) eq 'yes' and
        not is_interactive()) {
        die "autosshfs: PromptForAll set to 'yes' but running in a "
            . "non-interactive environment";
    }

    # PromptForAll not set, or set to other than 'yes': go ahead
    ($config->{&GENERIC_HOST}->{'autosshfs'}->{'Promptforall'} and
        lc($config->{&GENERIC_HOST}->{'autosshfs'}->{'Promptforall'}) eq 'yes') or
        return 1;

    yesno("Are you sure to $action all targets?") or do {
            print STDERR "autosshfs: user abort.\n";
            return 0;
    };
    return 1;
}

sub __connect {
    my ($options, $config, $list) = @_;
    my ($remote, $local);

    foreach my $target (@$list) {
        mounted($target) and do {
            $options->{'verbose'} and
                print STDERR "autosshfs: ${target} already mounted.\n";
            next;
        };
        $options->{'verbose'} and
            print STDERR "autosshfs: mounting ${target}...\n";

        my @conn_settings;
        update_conn_settings($config, \@conn_settings, $target);

        defined $config->{$target} or
            print STDERR "autosshfs: warning - no config for $target\n";

        $remote = get_remote($config, $target);
        $local = get_local($config, $target);
        make_path($local);

        # send sshfs into bg otherwise it blocks when run from ~/.ssh/config
        system("sshfs " . join(' ', @conn_settings) . " $remote $local &");
    }

    $options->{'verbose'} or return;

    print STDERR "Waiting " . &TCP_TIMEOUT
        . "s to allow sshfs mount to complete...\n";
    # TODO improve this
    sleep(&TCP_TIMEOUT);

    foreach my $target (@$list) {

        if (mounted($target)) {
            print STDERR "autosshfs: mounted $target on "
                . get_local($config, $target) . "\n";

        } else {
            print STDERR "autosshfs: failed to mount $target :-(\n";
        }
    }
}

sub __disconnect {
    my ($options, $config, $list) = @_;

    foreach my $target (@$list) {
        mounted($target) or do {
            $options->{'verbose'} and print STDERR "autosshfs: cannot "
                . "disconnect ${target}: not mounted.\n";
            next;
        };
        my $local = get_local($config, $target);
        system("fusermount", "-u", $local);
        mounted($target) and print STDERR "autosshfs: failed to umount $target "
            . "mounted on $local\n";
    }
}

sub connect_targets {
    my ($options, $config) = @_;

    same_arrays($options->{'connect'}, [&ALL_TARGETS]) and do {
        check_prompt_all($config, 'connect') or return;
        @{ $options->{'connect'} } = ();

        foreach my $target (sort keys %$config) {
            $target eq &GENERIC_HOST and next;

            (defined $config->{$target}->{'autosshfs'}->{'Excludefromall'} and
                lc($config->{$target}->{'autosshfs'}->{'Excludefromall'}) eq 'yes') or
                push @{ $options->{'connect'} }, $target;
        }
    };

    __connect($options, $config, $options->{'connect'});
}

sub disconnect_targets {
    my ($options, $config) = @_;

    same_arrays($options->{'disconnect'}, [&ALL_TARGETS]) and do {
        check_prompt_all($config, 'disconnect') or return;
        @{ $options->{'disconnect'} } = ();

        foreach my $target (sort keys %$config) {
            $target eq &GENERIC_HOST and next;

            (defined $config->{$target}->{'autosshfs'}->{'Excludefromall'} and
                lc($config->{$target}->{'autosshfs'}->{'Excludefromall'}) eq 'yes') or
                push @{ $options->{'disconnect'} }, $target;
        }
    };

    __disconnect($options, $config, $options->{'disconnect'});
}

sub reconnect_targets {
    my ($options, $config) = @_;

    # only reconnect what is connected
    same_arrays($options->{'reconnect'}, [&ALL_TARGETS]) and do {
        check_prompt_all($config, 'reconnect') or return;
        @{ $options->{'reconnect'} } = ();

        foreach my $target (sort keys %$config) {
            $target eq &GENERIC_HOST and next;
            (defined $config->{$target}->{'autosshfs'}->{'Excludefromall'} and
                lc($config->{$target}->{'autosshfs'}->{'Excludefromall'}) eq 'yes') and next;

            mounted($target) and push @{ $options->{'reconnect'} }, $target;
        }
    };

    __disconnect($options, $config, $options->{'reconnect'});
    __connect($options, $config, $options->{'reconnect'});
}

# ----------------------------------- MAIN ----------------------------------- #

my %options = (
    help       => undef,
    file       => undef,
    list       => undef,
    mounts     => undef,
    connect    => undef,
    disconnect => undef,
    reconnect  => undef,
    verbose    => undef,
);
my %config;

GetOptions('help'         => \$options{'help'},
           'file=s'       => \$options{'file'},
           'list'         => \$options{'list'},
           'mounts'       => \$options{'mounts'},
           'connect:s'    => sub {
               my ($name, $val) = @_;
               @{ $options{'connect'} } = $val ? split(/,/, $val) : (&ALL_TARGETS);
            },
           'disconnect:s' => sub {
               my ($name, $val) = @_;
               @{ $options{'disconnect'} } = $val ? split(/,/, $val) : (&ALL_TARGETS);
            },
           'reconnect:s'  => sub {
               my ($name, $val) = @_;
               @{ $options{'reconnect'} } = $val ? split(/,/, $val) : (&ALL_TARGETS);
           },
           'verbose'      => \$options{'verbose'}
);

$options{'help'} and usage();

$options{'list'} or $options{'mounts'} or $options{'connect'} or
    $options{'disconnect'} or $options{'reconnect'} or
    usage("At least one action out of '-l', '-m', '-c', '-d', '-r' is required.");

if ($options{'file'}) {
    -f $options{'file'} or die "Cannot read '$options{'file'}'";

} else {
    $options{'file'} = &SSH_CONFIG;
}

read_config(\%options, \%config);

$options{'list'} and do {
    list_targets(\%config);
    exit(0);
};

$options{'mounts'} and do {
    list_mounts(\%config);
    exit(0);
};

$options{'disconnect'} and disconnect_targets(\%options, \%config);

$options{'connect'} and connect_targets(\%options, \%config);

$options{'reconnect'} and do {
    disconnect_targets(\%options, \%config);
    connect_targets(\%options, \%config);
};

$options{'verbose'} and list_mounts(\%config);
